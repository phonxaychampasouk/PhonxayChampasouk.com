{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Machine } from 'xstate';\nvar statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\";\nvar statsMachine = Machine({\n  id: 'statsMachine',\n  initial: 'fetchStats',\n  states: {\n    fetchStats: {\n      invoke: {\n        src: function src() {\n          return new Promise( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n              var stats;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return fetch(statsApi).then(function (response) {\n                        return response.json();\n                      });\n\n                    case 3:\n                      stats = _context.sent;\n                      return _context.abrupt(\"return\", resolve(stats));\n\n                    case 7:\n                      _context.prev = 7;\n                      _context.t0 = _context[\"catch\"](0);\n                      console.log(\"error in fetching stats: \", _context.t0);\n                      return _context.abrupt(\"return\", reject(_context.t0));\n\n                    case 11:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[0, 7]]);\n            }));\n\n            return function (_x, _x2) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        },\n        onDone: {\n          target: 'ready',\n          actions: 'assignStats'\n        },\n        onError: 'error'\n      }\n    },\n    ready: {},\n    error: {}\n  }\n});\n\nvar IndexPage = function IndexPage() {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, \"CoronaVirus Information\");\n};\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js"],"names":["React","Machine","statsApi","statsMachine","id","initial","states","fetchStats","invoke","src","Promise","resolve","reject","fetch","then","response","json","stats","console","log","onDone","target","actions","onError","ready","error","IndexPage"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,QAAwB,QAAxB;AAEA,IAAMC,QAAQ,GAAG,oDAAjB;AACA,IAAMC,YAAY,GAAGF,OAAO,CAAC;AACzBG,EAAAA,EAAE,EAAE,cADqB;AAEzBC,EAAAA,OAAO,EAAE,YAFgB;AAGzBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,EAAE;AACRC,MAAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAE;AAAA,iBACL,IAAIC,OAAJ;AAAA,gFAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEeC,KAAK,CAACX,QAAD,CAAL,CAAgBY,IAAhB,CAAqB,UAACC,QAAD;AAAA,+BAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,uBAArB,CAFf;;AAAA;AAEEC,sBAAAA,KAFF;AAAA,uDAIGN,OAAO,CAACM,KAAD,CAJV;;AAAA;AAAA;AAAA;AAMJC,sBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AANI,uDAOGP,MAAM,aAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ;;AAAA;AAAA;AAAA;AAAA,cADK;AAAA,SADD;AAYJQ,QAAAA,MAAM,EAAE;AAAEC,UAAAA,MAAM,EAAE,OAAV;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAZJ;AAaJC,QAAAA,OAAO,EAAE;AAbL;AADA,KADR;AAkBJC,IAAAA,KAAK,EAAE,EAlBH;AAmBJC,IAAAA,KAAK,EAAE;AAnBH;AAHiB,CAAD,CAA5B;;AA2BA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADgB;AAAA,CAAlB;;KAAMA,S;AAIN,eAAeA,SAAf","sourcesContent":["import React from 'react'\n\nimport { Machine } from 'xstate'\n\nconst statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"\nconst statsMachine = Machine({\n    id: 'statsMachine',\n    initial: 'fetchStats',\n    states: {\n        fetchStats: {\n            invoke: {\n                src: () =>\n                new Promise(async (resolve, reject) => {\n                    try {\n                        const stats =await fetch(statsApi).then((response) => response.json()\n                        )\n                        return resolve(stats)\n                    }catch (error) {\n                        console.log(\"error in fetching stats: \", error)\n                        return reject(error)\n                    }\n                }),\n                onDone: { target: 'ready', actions: 'assignStats' },\n                onError: 'error',\n            }\n        },\n        ready: {},\n        error: {}\n    }\n})\n\n\nconst IndexPage = () => (\n  <div>CoronaVirus Information</div>\n)\n\nexport default IndexPage"]},"metadata":{},"sourceType":"module"}