{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { assign, Machine } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\nimport CountrySelector from \"../src/components/CountrySelector\";\nimport Stat from \"../src/components/stat\";\nimport CountrySearch from \"../src/components/CountrySearch\";\nvar statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"; //when page is loaded the machine will fetch the initial stats first.\n\nvar statsMachine = Machine({\n  id: \"statsMachine\",\n  initial: \"fetchStats\",\n  context: {\n    countriesSelected: [],\n    stats: null\n  },\n  states: {\n    fetchStats: {\n      invoke: {\n        src: function src() {\n          return new Promise( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n              var stats;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return fetch(statsApi).then(function (response) {\n                        return response.json();\n                      });\n\n                    case 3:\n                      stats = _context.sent;\n                      return _context.abrupt(\"return\", resolve(stats));\n\n                    case 7:\n                      _context.prev = 7;\n                      _context.t0 = _context[\"catch\"](0);\n                      console.log(\"error in fetching stats: \", _context.t0);\n                      return _context.abrupt(\"return\", reject(_context.t0));\n\n                    case 11:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee, null, [[0, 7]]);\n            }));\n\n            return function (_x, _x2) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        },\n        //onDone's target is the next target state, actions is how the state saves the returned promise to the machine\n        onDone: {\n          target: \"ready\",\n          actions: \"assignStats\"\n        },\n        onError: \"error\"\n      }\n    },\n    ready: {\n      on: {\n        COUNTRY_SELECTED: {\n          actions: \"updateSelectedCountry\"\n        }\n      }\n    },\n    error: {}\n  }\n}, {\n  // assign keyword is letting you know it is assigning a new prop, context\n  actions: {\n    assignStats: assign(function (context, event) {\n      return {\n        stats: event.data\n      };\n    }),\n    updateSelectedCountry: assign(function (context, event) {\n      return {\n        countriesSelected: context.stats.reduce(function (acc, stat) {\n          return stat.country.toLowerCase().match(event.country.target.value.toLowerCase()) ? [].concat(_toConsumableArray(acc), [stat]) : acc;\n        }, [])\n      };\n    })\n  }\n});\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useMachine = useMachine(statsMachine),\n      _useMachine2 = _slicedToArray(_useMachine, 2),\n      current = _useMachine2[0],\n      send = _useMachine2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  }, \"CoronaVirus Information\"), current.matches(\"fetchStats\") && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 43\n    }\n  }, \"Loading Stats\\u2026\"), current.matches(\"error\") && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 38\n    }\n  }, \"Error fetching stats\\u2026\"), current.matches(\"ready\") && __jsx(React.Fragment, null, __jsx(CountrySelector, {\n    stats: current.context.stats,\n    handleChange: function handleChange(country) {\n      return send(\"COUNTRY_SELECTED\", {\n        country: country\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), __jsx(CountrySearch, {\n    handleChange: function handleChange(country) {\n      return send(\"COUNTRY_SELECTED\", {\n        country: country\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })), current.context.countriesSelected.length > 0 && __jsx(Stat, {\n    stats: current.context.countriesSelected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }));\n};\n\n_s(IndexPage, \"hivFDqy8aBXkc2TxKDfXx/cZtwE=\", false, function () {\n  return [useMachine];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js"],"names":["React","assign","Machine","useMachine","CountrySelector","Stat","CountrySearch","statsApi","statsMachine","id","initial","context","countriesSelected","stats","states","fetchStats","invoke","src","Promise","resolve","reject","fetch","then","response","json","console","log","onDone","target","actions","onError","ready","on","COUNTRY_SELECTED","error","assignStats","event","data","updateSelectedCountry","reduce","acc","stat","country","toLowerCase","match","value","IndexPage","current","send","matches","length"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { assign, Machine } from \"xstate\"\nimport { useMachine } from \"@xstate/react\"\nimport CountrySelector from \"../src/components/CountrySelector\"\nimport Stat from \"../src/components/stat\"\nimport CountrySearch from \"../src/components/CountrySearch\"\n\nconst statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"\n\n//when page is loaded the machine will fetch the initial stats first.\nconst statsMachine = Machine(\n    {\n      id: \"statsMachine\",\n      initial: \"fetchStats\",\n      context: {\n        countriesSelected: [],\n        stats: null,\n      },\n      states: {\n        fetchStats: {\n          invoke: {\n            src: () =>\n              new Promise(async (resolve, reject) => {\n                try {\n                  const stats = await fetch(statsApi).then((response) =>\n                    response.json()\n                  )\n                  return resolve(stats)\n                } catch (error) {\n                  console.log(\"error in fetching stats: \", error)\n                  return reject(error)\n                }\n              }),\n              //onDone's target is the next target state, actions is how the state saves the returned promise to the machine\n            onDone: { target: \"ready\", actions: \"assignStats\" },\n            onError: \"error\",\n          },\n        },\n        ready: {\n          on: {\n            COUNTRY_SELECTED: { actions: \"updateSelectedCountry\" },\n          },\n        },\n        error: {},\n      },\n    },\n    {\n        // assign keyword is letting you know it is assigning a new prop, context\n      actions: {\n        assignStats: assign((context, event) => ({\n          stats: event.data,\n        })),\n        updateSelectedCountry: assign((context, event) => ({\n          countriesSelected: context.stats.reduce(\n            (acc, stat) =>\n              stat.country\n                .toLowerCase()\n                .match(event.country.target.value.toLowerCase())\n                ? [...acc, stat]\n                : acc,\n            []\n          ),\n        })),\n      },\n    }\n  )\n  const IndexPage = () => {\n    const [current, send] = useMachine(statsMachine)\n    return (\n      <>\n         <h3>CoronaVirus Information</h3> \n        {current.matches(\"fetchStats\") && <div>Loading Stats…</div>} \n        {current.matches(\"error\") && <div>Error fetching stats…</div>} \n        {current.matches(\"ready\") && (\n          <>\n             \n            <CountrySelector\n              stats={current.context.stats}\n              handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n            />\n             \n            <CountrySearch\n              handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n            />\n             \n          </>\n        )}\n         \n        {current.context.countriesSelected.length > 0 && (\n          <Stat stats={current.context.countriesSelected} />\n        )}\n         \n      </>\n    )\n  }\n  export default IndexPage"]},"metadata":{},"sourceType":"module"}