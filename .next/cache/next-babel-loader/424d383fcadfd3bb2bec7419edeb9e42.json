{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { assign, Machine } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\nimport CountrySelector from \"../src/components/CountrySelector\";\nimport Stat from \"../src/components/stat\";\nimport CountrySearch from \"../src/components/CountrySearch\";\nvar statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"; //when page is loaded the machine will fetch the initial stats first.\n\nvar statsMachine = Machine({\n  id: 'statsMachine',\n  //when the page loads the state will fetchStats\n  initial: 'fetchStats',\n  //when the promise resolves successfully, xstate will assign the context to stats prop\n  context: {\n    stats: null\n  },\n  states: {\n    fetchStats: {\n      invoke: {\n        //running async function that returns a promise\n        src: function src() {\n          return new Promise( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n              var stats;\n              return _regeneratorRuntime.wrap(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      _context2.next = 3;\n                      return fetch(statsApi).then(function (response) {\n                        return response.json();\n                      });\n\n                    case 3:\n                      stats = _context2.sent;\n                      return _context2.abrupt(\"return\", resolve(stats));\n\n                    case 7:\n                      _context2.prev = 7;\n                      _context2.t0 = _context2[\"catch\"](0);\n                      console.log(\"error in fetching stats: \", _context2.t0);\n                      return _context2.abrupt(\"return\", reject(_context2.t0));\n\n                    case 11:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee, null, [[0, 7]]);\n            }));\n\n            return function (_x, _x2) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        },\n        //target is the next state to move too, in this case it is the state ready\n        onDone: {\n          target: 'ready',\n          actions: 'assignStats'\n        },\n        onError: 'error'\n      }\n    },\n    ready: {},\n    error: {}\n  }\n}, {\n  actions: {\n    assignStats: assign(function (_context, event) {\n      return {\n        stats: event.data\n      };\n    })\n  }\n});\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  var _useMachine = useMachine(statsMachine),\n      _useMachine2 = _slicedToArray(_useMachine, 2),\n      current = _useMachine2[0],\n      send = _useMachine2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 8\n    }\n  }, \"CoronaVirus Information\"), current.matches(\"fetchStats\") && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 41\n    }\n  }, \"Loading Stats\\u2026\"), current.matches(\"error\") && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 36\n    }\n  }, \"Error fetching stats\\u2026\"), current.matches(\"ready\") && __jsx(React.Fragment, null, __jsx(CountrySelector, {\n    stats: current.context.stats,\n    handleChange: function handleChange(country) {\n      return send(\"COUNTRY_SELECTED\", {\n        country: country\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), __jsx(CountrySearch, {\n    handleChange: function handleChange(country) {\n      return send(\"COUNTRY_SELECTED\", {\n        country: country\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), current.context.countriesSelected.length > 0 && __jsx(Stat, {\n    stats: current.context.countriesSelected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(IndexPage, \"hivFDqy8aBXkc2TxKDfXx/cZtwE=\", false, function () {\n  return [useMachine];\n});\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js"],"names":["React","assign","Machine","useMachine","CountrySelector","Stat","CountrySearch","statsApi","statsMachine","id","initial","context","stats","states","fetchStats","invoke","src","Promise","resolve","reject","fetch","then","response","json","console","log","onDone","target","actions","onError","ready","error","assignStats","_context","event","data","IndexPage","current","send","matches","country","countriesSelected","length"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { assign, Machine } from \"xstate\"\nimport { useMachine } from \"@xstate/react\"\nimport CountrySelector from \"../src/components/CountrySelector\"\nimport Stat from \"../src/components/stat\"\nimport CountrySearch from \"../src/components/CountrySearch\"\n\nconst statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"\n\n//when page is loaded the machine will fetch the initial stats first.\nconst statsMachine = Machine({\n    id: 'statsMachine',\n    //when the page loads the state will fetchStats\n    initial: 'fetchStats',\n    //when the promise resolves successfully, xstate will assign the context to stats prop\n    context: {\n        stats: null\n    },\n    states: {\n        fetchStats: {\n            invoke: {\n                //running async function that returns a promise\n                src: () =>\n                new Promise(async (resolve, reject) => {\n                    try {\n                        const stats =await fetch(statsApi).then((response) => response.json()\n                        )\n                        return resolve(stats)\n                    }catch (error) {\n                        console.log(\"error in fetching stats: \", error)\n                        return reject(error)\n                    }\n                }),\n                //target is the next state to move too, in this case it is the state ready\n                onDone: { target: 'ready', actions: 'assignStats' },\n                onError: 'error',\n            }\n        },\n        ready: {},\n        error: {}\n    }\n}, {\n    actions: {\n        assignStats: assign((_context, event) => ({\n            stats: event.data\n        }))\n    }\n})\n const IndexPage = () => {\n     const [current, send] = useMachine(statsMachine)\n     return (\n        <>\n       <h3>CoronaVirus Information</h3> \n      {current.matches(\"fetchStats\") && <div>Loading Stats…</div>} \n      {current.matches(\"error\") && <div>Error fetching stats…</div>} \n      {current.matches(\"ready\") && (\n        <>\n           \n          <CountrySelector\n            stats={current.context.stats}\n            handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n          />\n           \n          <CountrySearch\n            handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n          />\n           \n        </>\n      )}\n       \n      {current.context.countriesSelected.length > 0 && (\n        <Stat stats={current.context.countriesSelected} />\n      )}\n       \n    </>\n  )\n}\nexport default IndexPage"]},"metadata":{},"sourceType":"module"}