{"ast":null,"code":"var _jsxFileName = \"/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { assign, Machine } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\nimport CountrySelector from \"../src/components/CountrySelector\";\nimport Stat from \"../src/components/stat\";\nimport CountrySearch from \"../src/components/CountrySearch\";\nconst statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"; //when page is loaded the machine will fetch the initial stats first.\n\nconst statsMachine = Machine({\n  id: \"statsMachine\",\n  initial: \"fetchStats\",\n  context: {\n    countriesSelected: [],\n    stats: null\n  },\n  states: {\n    fetchStats: {\n      invoke: {\n        src: () => new Promise(async (resolve, reject) => {\n          try {\n            const stats = await fetch(statsApi).then(response => response.json());\n            return resolve(stats);\n          } catch (error) {\n            console.log(\"error in fetching stats: \", error);\n            return reject(error);\n          }\n        }),\n        //onDone's target is the next target state, actions is how the state saves the returned promise to the machine\n        //actions simutaneously assigns the stats and the state moves to the target state\n        onDone: {\n          target: \"ready\",\n          actions: \"assignStats\"\n        },\n        onError: \"error\"\n      }\n    },\n    ready: {\n      on: {\n        COUNTRY_SELECTED: {\n          actions: \"updateSelectedCountry\"\n        }\n      }\n    },\n    error: {}\n  }\n}, {\n  // assign keyword is letting you know it is assigning a new prop, context is what is in you state\n  //event is the returned promise\n  actions: {\n    assignStats: assign((_context, event) => ({\n      stats: event.data\n    })),\n    updateSelectedCountry: assign((context, event) => ({\n      countriesSelected: context.stats.reduce((acc, stat) => stat.country.toLowerCase().match(event.country.target.value.toLowerCase()) ? [...acc, stat] : acc, [])\n    }))\n  }\n});\n\nconst IndexPage = () => {\n  const [current, send] = useMachine(statsMachine);\n  return __jsx(React.Fragment, null, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }, \"CoronaVirus Information\"), current.matches(\"fetchStats\") && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 43\n    }\n  }, \"Loading Stats\\u2026\"), current.matches(\"error\") && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 38\n    }\n  }, \"Error fetching stats\\u2026\"), current.matches(\"ready\") && __jsx(React.Fragment, null, __jsx(CountrySelector, {\n    stats: current.context.stats,\n    handleChange: country => send(\"COUNTRY_SELECTED\", {\n      country\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), __jsx(CountrySearch, {\n    handleChange: country => send(\"COUNTRY_SELECTED\", {\n      country\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  })), current.context.countriesSelected.length > 0 && __jsx(Stat, {\n    stats: current.context.countriesSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/phonxaychampasouk/Desktop/Github/PhonxayChampasouk.com/pages/about.js"],"names":["React","assign","Machine","useMachine","CountrySelector","Stat","CountrySearch","statsApi","statsMachine","id","initial","context","countriesSelected","stats","states","fetchStats","invoke","src","Promise","resolve","reject","fetch","then","response","json","error","console","log","onDone","target","actions","onError","ready","on","COUNTRY_SELECTED","assignStats","_context","event","data","updateSelectedCountry","reduce","acc","stat","country","toLowerCase","match","value","IndexPage","current","send","matches","length"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { assign, Machine } from \"xstate\"\nimport { useMachine } from \"@xstate/react\"\nimport CountrySelector from \"../src/components/CountrySelector\"\nimport Stat from \"../src/components/stat\"\nimport CountrySearch from \"../src/components/CountrySearch\"\n\nconst statsApi = \"https://coronavirus-19-api.herokuapp.com/countries\"\n\n//when page is loaded the machine will fetch the initial stats first.\nconst statsMachine = Machine(\n    {\n      id: \"statsMachine\",\n      initial: \"fetchStats\",\n      context: {\n        countriesSelected: [],\n        stats: null,\n      },\n      states: {\n        fetchStats: {\n          invoke: {\n            src: () =>\n              new Promise(async (resolve, reject) => {\n                try {\n                  const stats = await fetch(statsApi).then((response) =>\n                    response.json()\n                  )\n                  return resolve(stats)\n                } catch (error) {\n                  console.log(\"error in fetching stats: \", error)\n                  return reject(error)\n                }\n              }),\n              //onDone's target is the next target state, actions is how the state saves the returned promise to the machine\n                //actions simutaneously assigns the stats and the state moves to the target state\n            onDone: { target: \"ready\", actions: \"assignStats\" },\n            onError: \"error\",\n          },\n        },\n        ready: {\n          on: {\n            COUNTRY_SELECTED: { actions: \"updateSelectedCountry\" },\n          },\n        },\n        error: {},\n      },\n    },\n    {\n        // assign keyword is letting you know it is assigning a new prop, context is what is in you state\n        //event is the returned promise\n      actions: {\n        assignStats: assign((_context, event) => ({\n          stats: event.data,\n        })),\n\n        updateSelectedCountry: assign((context, event) => ({\n          countriesSelected: context.stats.reduce(\n            (acc, stat) =>\n              stat.country\n                .toLowerCase()\n                .match(event.country.target.value.toLowerCase())\n                ? [...acc, stat]\n                : acc,\n            []\n          ),\n        })),\n      },\n    }\n  )\n  const IndexPage = () => {\n    const [current, send] = useMachine(statsMachine)\n    return (\n      <>\n         <h3>CoronaVirus Information</h3> \n        {current.matches(\"fetchStats\") && <div>Loading Stats…</div>} \n        {current.matches(\"error\") && <div>Error fetching stats…</div>} \n        {current.matches(\"ready\") && (\n          <>\n             \n            <CountrySelector\n              stats={current.context.stats}\n              handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n            />\n             \n            <CountrySearch\n              handleChange={(country) => send(\"COUNTRY_SELECTED\", { country })}\n            />\n             \n          </>\n        )}\n         \n        {current.context.countriesSelected.length > 0 && (\n          <Stat stats={current.context.countriesSelected} />\n        )}\n         \n      </>\n    )\n  }\n  export default IndexPage"]},"metadata":{},"sourceType":"module"}